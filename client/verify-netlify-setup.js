#!/usr/bin/env node

import fs from 'fs';
import path from 'path';
import { fileURLToPath } from 'url';

const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);

console.log('üîç Verificando configuraci√≥n para deploy en Netlify...\n');

const checks = [
  {
    name: 'netlify.toml',
    path: 'netlify.toml',
    required: true,
    description: 'Archivo de configuraci√≥n principal de Netlify'
  },
  {
    name: 'package.json',
    path: 'package.json',
    required: true,
    description: 'Archivo de dependencias y scripts'
  },
  {
    name: 'public/_redirects',
    path: 'public/_redirects',
    required: true,
    description: 'Redirecciones para SPA'
  },
  {
    name: 'public/_headers',
    path: 'public/_headers',
    required: true,
    description: 'Headers de seguridad y cach√©'
  },
  {
    name: 'vite.config.ts',
    path: 'vite.config.ts',
    required: true,
    description: 'Configuraci√≥n de Vite'
  },
  {
    name: 'env.production.example',
    path: 'env.production.example',
    required: false,
    description: 'Variables de entorno de ejemplo para producci√≥n'
  }
];

let allPassed = true;

checks.forEach(check => {
  const filePath = path.join(__dirname, check.path);
  const exists = fs.existsSync(filePath);
  
  if (exists) {
    console.log(`‚úÖ ${check.name} - ${check.description}`);
  } else if (check.required) {
    console.log(`‚ùå ${check.name} - ${check.description} (REQUERIDO)`);
    allPassed = false;
  } else {
    console.log(`‚ö†Ô∏è  ${check.name} - ${check.description} (OPCIONAL)`);
  }
});

// Verificar package.json
try {
  const packageJson = JSON.parse(fs.readFileSync(path.join(__dirname, 'package.json'), 'utf8'));
  
  console.log('\nüì¶ Verificando package.json...');
  
  if (packageJson.scripts && packageJson.scripts.build) {
    console.log('‚úÖ Script de build encontrado');
  } else {
    console.log('‚ùå Script de build no encontrado en package.json');
    allPassed = false;
  }
  
  if (packageJson.dependencies && packageJson.dependencies.react) {
    console.log('‚úÖ React encontrado en dependencias');
  } else {
    console.log('‚ùå React no encontrado en dependencias');
    allPassed = false;
  }
  
} catch (error) {
  console.log('‚ùå Error al leer package.json:', error.message);
  allPassed = false;
}

// Verificar netlify.toml
try {
  const netlifyConfig = fs.readFileSync(path.join(__dirname, 'netlify.toml'), 'utf8');
  
  console.log('\n‚öôÔ∏è  Verificando netlify.toml...');
  
  if (netlifyConfig.includes('base = "client"')) {
    console.log('‚úÖ Base directory configurado correctamente');
  } else {
    console.log('‚ö†Ô∏è  Base directory no configurado como "client"');
  }
  
  if (netlifyConfig.includes('command = "npm run build"')) {
    console.log('‚úÖ Build command configurado correctamente');
  } else {
    console.log('‚ö†Ô∏è  Build command no configurado como "npm run build"');
  }
  
  if (netlifyConfig.includes('publish = "dist"')) {
    console.log('‚úÖ Publish directory configurado correctamente');
  } else {
    console.log('‚ö†Ô∏è  Publish directory no configurado como "dist"');
  }
  
} catch (error) {
  console.log('‚ùå Error al leer netlify.toml:', error.message);
  allPassed = false;
}

console.log('\n' + '='.repeat(50));

if (allPassed) {
  console.log('üéâ ¬°Configuraci√≥n verificada exitosamente!');
  console.log('‚úÖ Tu proyecto est√° listo para deploy en Netlify');
  console.log('\nüìã Pr√≥ximos pasos:');
  console.log('1. Haz commit y push de los cambios al repositorio');
  console.log('2. Ve a netlify.com y conecta tu repositorio de GitHub');
  console.log('3. Configura las variables de entorno en Netlify');
  console.log('4. ¬°Deploy autom√°tico!');
} else {
  console.log('‚ùå Se encontraron problemas en la configuraci√≥n');
  console.log('üîß Por favor, corrige los errores antes de proceder');
}

console.log('\nüìñ Para m√°s informaci√≥n, consulta README-NETLIFY.md');
